#!hoc
/* default associativity */
func int default( \
        int a, int b, int c, int d,      \
        float e, int f, int g, int h,      \
        int i, int j, double k, int l,      \
        int m)          {                \
    return a && b && c && d || e || f || \
           g || h && i && j || k || l || m;
}

/* left associativity */
func int left_asoc(                          \
        int a, int b, int c, int d,          \
        int e, int f, int g, int h,          \
        int i, int j, int k, int l,          \
        int m)          {                    \
    return (((((((((a&&b)&&c)&&d)||e)||f)||g)\
           ||((h&&i)&&j))||k)||l)||m;
}

/* right associativity */
func int right_asoc(                     \
        int a, int b, int c, int d,      \
        int e, int f, int g, int h,      \
        int i, int j, int k, int l,      \
        int m)         {                 \
    return (a&&(b&&(c&&d)))||(e||(f||(g \
           ||((h&&(i&&j))||(k||(l||m))))));
}

/* main code */
proc pepe() {
    int ok = 0, n = 0;
    int a0 = 0;
    while (a0 < 2) {
        int a1 = 0;
        while (a1 < 2) {
            int a2 = 0;
            while (a2 < 2) {
                int a3 = 0;
                while (a3 < 2) {
                    int a4 = 0;
                    while (a4 < 2) {
                        int a5 = 0;
                        while (a5 < 2) {
                            int a6 = 0;
                            while (a6 < 2) {
                                int a7 = 0;
                                while (a7 < 2) {
                                    int a8 = 0;
                                    while (a8 < 2) {
                                        int a9 = 0;
                                        while (a9 < 2) {
                                            int a10 = 0;
                                            while (a10 < 2) {
                                                int a11 = 0;
                                                while (a11 < 2) {
                                                    int a12 = 0;
                                                    while (a12 < 2) {
                                                        ++n;
    int def   = default(   a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    int left  = left_asoc( a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    int right = right_asoc(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);

    /* def must be equal to left  and right */

    if (def != left || def != right || left != right) {
        print "Test #", n, ": def=", def, ", left=", left, ", right=", right, "\n";
    } else {
        ok = ok + 1;
    }
    #symbs;
                                                        a12++;
                                                    }
                                                    a11++;
                                                }
                                                a10++;
                                            }
                                            a9++;
                                        }
                                        a8++;
                                    }
                                    a7++;
                                }
                                a6++;
                            }
                            a5++;
                        }
                        a4++;
                    }
                    a3++;
                }
                a2++;
            }
            a1++;
        }
        a0++;
    }
    print "passed tests = ", ok,     " (", 100 *     ok /n, "%)\n";
    print "failed tests = ", n - ok, " (", 100 *(n - ok)/n, "%)\n";
    print "total  tests = ", n,      "\n";
}
#list;
pepe();
