#!/usr/local/bin/hoc
/* Funcion de Ackerman:
 * ack(x, y): N -> N
 *
 * ack(0, y) -> y + 1
 * ack(x, 0) -> ack(x - 1, 1)
 * ack(x, y) -> ack(x - 1, ack(x, y - 1))
 */

long n = 0;

func int ack(int x, int y) {
    n = n + 1;
    if (x == 0) return y + 1;              /* 1 */
    if (y == 0) return ack(x - 1, 1);      /* 2 */
    return ack(x - 1, ack(x, y - 1));      /* 3 */
}

/*
 * ack(3,  1) -3-> ack(2, ack(3,  0)) -> ack(2,  5) -> 13
 * ack(3,  0) -2->                       ack(2,  1) ->  5
 * ack(2,  5) -3-> ack(1, ack(2,  4)) -> ack(1, 11) -> 13
 * ack(2,  4) -3-> ack(1, ack(2,  3)) -> ack(1,  9) -> 11
 * ack(2,  3) -3-> ack(1, ack(2,  2)) -> ack(1,  7) ->  9
 * ack(2,  2) -3-> ack(1, ack(2,  1)) -> ack(1,  5) ->  7
 * ack(2,  1) -3-> ack(1, ack(2,  0)) -> ack(1,  3) ->  5
 * ack(2,  0) -2->                       ack(1,  1) ->  3
 * ack(1, 11) -3-> ack(0, ack(1, 10)) -> ack(0, 12) -> 13
 * ack(1, 10) -3-> ack(0, ack(1,  9)) -> ack(0, 11) -> 12
 * ack(1,  9) -3-> ack(0, ack(1,  8)) -> ack(0, 10) -> 11
 * ack(1,  8) -3-> ack(0, ack(1,  7)) -> ack(0,  9) -> 10
 * ack(1,  7) -3-> ack(0, ack(1,  6)) -> ack(0,  8) ->  9
 * ack(1,  6) -3-> ack(0, ack(1,  5)) -> ack(0,  7) ->  8
 * ack(1,  5) -3-> ack(0, ack(1,  4)) -> ack(0,  6) ->  7
 * ack(1,  4) -3-> ack(0, ack(1,  3)) -> ack(0,  5) ->  6
 * ack(1,  3) -3-> ack(0, ack(1,  2)) -> ack(0,  4) ->  5
 * ack(1,  2) -3-> ack(0, ack(1,  1)) -> ack(0,  3) ->  4
 * ack(1,  1) -3-> ack(0, ack(1,  0)) -> ack(0,  2) ->  3
 * ack(1,  0) -2->                       ack(0,  1) ->  2
 * ack(0, 12) -1-> 13
 * ack(0, 11) -1-> 12
 * ack(0, 10) -1-> 11
 * ack(0,  9) -1-> 10
 * ack(0,  8) -1->  9
 * ack(0,  7) -1->  8
 * ack(0,  6) -1->  7
 * ack(0,  5) -1->  6
 * ack(0,  4) -1->  5
 * ack(0,  3) -1->  4
 * ack(0,  2) -1->  3
 * ack(0,  1) -1->  2
 */
