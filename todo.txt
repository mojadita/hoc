* Fri Mar 21 13:15:36 -05 2025
  implementar  la  instruccion print  para  que  imprima listas  de
  expresiones,   intercaladas  con   impresiones   de  cadenas   de
  caracteres para formatear la salida.
  
* Sat Mar 22 12:10:34 -05 2025
  Incluir soporte para usar colores en la salida de las trazas.
  
* Sun Mar 23 11:34:00 -05 2025
  implementar  las instrucciones  como  indices de  un array,  para
  permitir listar el programa producido en lugar de usar las trazas
  que  empleamos ahora.  La instruccion  debera tener  entonces una
  estructura, para  almacenar varios  punteros a funcion,  una para
  ejecutar  el codigo,  otra para  listar la  instruccion (con  sus
  parametros tomados  de la  memoria), otra  para trazar  el codigo
  (segun se ejecuta) el nombre de la instruccion, etc.
  
* Tue Mar 25 14:52:47 -05 2025
  eliminar  las instrucciones  'whilecode' e  'ifcode' en  favor de
  instrucciones  mas  sencillas   como  'if_0_goto', 'Goto'. Falta
  eliminar las instrucciones 'whilecode' e 'ifcode'.
  
* Sat Mar 29 09:29:23 -05 2025
  Implementar  AND y  OR  de forma  que corten  la  expresion y  no
  evaluen   el  operando   derecho  si   la  expresion   puede  ser
  cortocircuitada.  (AND  puede  serlo  si  el  operando  izquierdo
  resulta ser 0, y OR puede  serlo si el operando izquierdo resulta
  ser distinto de  cero) Cambiar estos operadores  para que evaluen
  de izquierda a derecha, pero con asociatividad por la derecha, de
  forma que los saltos sean al final  de la expresion y no al final
  del operador derecho  (asi se emplea un salto solo  para salir en
  lugar  de  una cadena  de  saltos)  Nota para  implementar:  usar
  instrucciones  nuevas  'and_then'  y 'or_else'.  'and_then'  debe
  evaluar el top de la pila y si es 0, saltar (sin hacer drop) a la
  instruccion indicada en  el parametro. En caso  contrario se hace
  drop y se  continua con la siguiente  instruccion. 'or_else' debe
  evaluar el top de la pila y si es 1, saltar (sin hacer drop) a la
  instruccion indicada en  el parametro. En caso  contrario se hace
  drop y se continua con la siguiente instruccion.
  
* Mon Apr  7 17:20:50 -05 2025
  implementar la localizacion del token que falla cuando hay un
  error de sintaxis.

* Sat Apr 12 12:05:42 -05 2025
  tratar de meter los parametros  en la instruccion misma
  (CODE_INST), de forma que se ahorren celdas de memoria en el
  programa.

* Mon Apr 14 13:16:54 -05 2025
  implementar operadores '++', '--', '+=', '-=', '*=' '/=', '%='
  implementar instrucciones para incrementar variable, decrementar,
  sumar, restar, multiplicar y dividir variable.  En los casos
  de incremento, la instruccion solo toma el simbolo correspondiente
  a la variable.  Para el resto, el dato a operar se toma de la
  pila.

* implementar  variables locales y parametros  con identificadores
  como nombres, en lugar de usar la notacion $<n>.
  func int ack(a, b; c, d)
  a = ack(3, 3)
  
* implementar las variables en memoria.

* usar tipos. Implementar los tipos 'int' y 'double'.  Obligar a
  declarar las variables?
  
* implementar la pila en memoria.
  
* implementar los contextos de las funciones en memoria.
  
* traducir a ensamblador 'de verdad'.
  
* implementar funciones anidadas, como en  pascal. Esto es comun en
  lenguajes tipo pascal,  modula 2, ada o en parte  en java (cuando
  se emplean lambdas)
  
* soportar tipos de datos estructurados y arrays???
